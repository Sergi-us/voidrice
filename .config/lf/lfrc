# Lukes lf-Einstellungen (√ºbersetzt von Sergius)


# Hinweis zu Bildvorschauen
# F√ºr diejenigen, die Bildvorschauen w√ºnschen, wie dieses System, gibt es vier Schritte zur
# Einrichtung. Diese werden f√ºr LARBS-Benutzer automatisch durchgef√ºhrt, aber ich werde sie
# hier f√ºr andere erw√§hnen, die es manuell einrichten.
#
# 1. ueberzug muss installiert sein.
# 2. Die Scope-Datei (~/.config/lf/scope f√ºr mich) muss einen Befehl √§hnlich
#    meinem enthalten, um ueberzug-Bilder zu generieren.
# 3. Eine `set cleaner`-Zeile wie unten ist ein Cleaner-Skript.
# 4. lf sollte √ºber ein Wrapper-Skript (~/.local/bin/lfub f√ºr mich) gestartet werden,
#    das die Umgebung f√ºr ueberzug erstellt. Dieser Befehl kann in Ihrer shellrc
#    als Alias gesetzt werden (`alias lf="lfub") oder, wenn er an eine Taste gebunden ist,
#    sollte er direkt anstelle des normalen lf aufgerufen werden.

# Grundlegende Variablen
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'
set autoquit true

# Befehle/Funktionen
cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) localc $fx ;;
	image/vnd.djvu|application/pdf|application/postscript) setsid -f zathura $fx >/dev/null 2>&1 ;;
        text/*|application/json|inode/x-empty|application/x-subrip) $EDITOR $fx;;
	image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
	image/svg+xml) display -- $f ;;
	image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|avif\|tif\|ico\)\(_large\)*$" |
		setsid -f nsxiv -aio 2>/dev/null | while read -r file; do
			[ -z "$file" ] && continue
			lf -remote "send select \"$file\""
			lf -remote "send toggle"
		done &
		;;
	audio/*|video/x-ms-asf) mpv --audio-display=no $f ;;
	video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
	application/pdf|application/vnd.djvu|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
	application/pgp-encrypted) $EDITOR $fx ;;
	application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text|application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template|application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint|application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template|application/vnd.oasis.opendocument.formula|application/vnd.oasis.opendocument.database) setsid -f libreoffice $fx >/dev/null 2>&1 ;;
        application/octet-stream) case ${f##*.} in
			doc|docx|xls|xlsx|odt|ppt|pptx) setsid -f libreoffice $fx >/dev/null 2>&1 ;;
			ghw) setsid -f gtkwave $f >/dev/null 2>&1 ;;
			ts) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
			*) setsid -f zathura $fx >/dev/null 2>&1 ;;
	   	esac ;;
	*) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

cmd mkdir $mkdir -p "$@"

cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "Extrahieren?[y/N]"
	read ans
	[ $ans = "y" ] && {
		case $fx in
			*.tar.bz2)   tar xjf $fx     ;;
			*.tar.gz)    tar xzf $fx     ;;
			*.bz2)       bunzip2 $fx     ;;
			*.rar)       unrar e $fx     ;;
			*.gz)        gunzip $fx      ;;
			*.tar)       tar xf $fx      ;;
			*.tbz2)      tar xjf $fx     ;;
			*.tgz)       tar xzf $fx     ;;
			*.zip)       unzip $fx       ;;
			*.Z)         uncompress $fx  ;;
			*.7z)        7z x $fx        ;;
			*.tar.xz)    tar xf $fx      ;;
		esac
	}
}}

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "L√∂schen?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Wohin verschieben?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "üöö Datei(en) verschoben." "Datei(en) wurden nach $dest verschoben."
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Wohin kopieren?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "üìã Datei(en) kopiert." "Datei(en) wurden nach $dest kopiert."
}}

cmd setbg "$1"

cmd bulkrename ${{
    tmpfile_old="$(mktemp)"
    tmpfile_new="$(mktemp)"

    [ -n "$fs" ] && fs=$(basename -a $fs) || fs=$(ls)

    echo "$fs" > "$tmpfile_old"
    echo "$fs" > "$tmpfile_new"
    $EDITOR "$tmpfile_new"

    [ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ] || { rm -f "$tmpfile_old" "$tmpfile_new"; exit 1; }

    paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
    do
        [ "$src" = "$dst" ] || [ -e "$dst" ] || mv -- "$src" "$dst"
    done

    rm -f "$tmpfile_old" "$tmpfile_new"
    lf -remote "send $id unselect"
}}

cmd adbpull ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Wohin auf das Handy √ºbertragen?"
	dest="/sdcard/Music"  # Standardzielordner auf dem Handy
	for x in $fx; do
		adb push "$x" "$dest" &&
		notify-send "üì± Datei √ºbertragen." "Datei $x wurde auf das Handy √ºbertragen."
	done
}}

# Tastenbelegungen
# Ctrl+f	√ñffnet fzf (fuzzy finder) und w√§hlt die ausgew√§hlte Datei in lf aus.
map <c-f> $lf -remote "send $id select \"$(fzf)\""
# J		√ñffnet fzf mit einer Liste von Lesezeichen-Verzeichnissen und wechselt zum ausgew√§hlten Verzeichnis.
map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)"
map H cd ~	#Springt zum Home-Verzeichniss
map g top
map D delete
map E extract
map C copyto
map M moveto
# Ctrl+n	Startet den Befehl zum Erstellen eines neuen Verzeichnisses.
map <c-n> push :mkdir<space>""<left>
# Ctrl+r	L√§dt die aktuelle Ansicht neu.
map <c-r> reload
# Ctrl+s 	Schaltet die Anzeige versteckter Dateien ein/aus.
map <c-s> set hidden!
# Enter 	√ñffnet eine Shell im aktuellen Verzeichnis.
map <enter> shell
# x 		F√ºhrt die ausgew√§hlte Datei als Befehl aus.
map x $$f
# X 		F√ºhrt die ausgew√§hlte Datei als Befehl aus und wartet auf Beendigung.
map X !$f
# o 		√ñffnet die Datei mit dem Standard-Programm.
map o &mimeopen "$f"
# O 		Fragt, mit welchem Programm die Datei ge√∂ffnet werden soll.
map O $mimeopen --ask "$f"
# c 		Startet eine neue Umbenennung, l√∂scht den vorhandenen Namen.
map c push A<c-u>
# I		Startet die Umbenennung am Anfang des Dateinamens.
map I :rename; cmd-home
# i 		Startet die Umbenennung vor der Dateierweiterung.
map i :rename
# a		Startet die Umbenennung nach der Dateierweiterung.
map a :rename; cmd-right
# A		ADB Puch f√ºr Datei und Verzeichniss.
map A adbpull
# B 		Startet die Massenumbenennung f√ºr mehrere ausgew√§hlte Dateien.
map B bulkrename
# b		Setzt die ausgew√§hlte Datei als Hintergrundbild.
map b $setbg $f

# Ausf√ºhrungsrechte f√ºr ausgew√§hlte Dateien entziehen
map <c-y> $for f in $fx; do chmod -x "$f"; done && lf -remote "send $id reload" && lf -remote "send $id unselect"

# Ausf√ºhrungsrechte f√ºr ausgew√§hlte Dateien geben
map <c-x> $for f in $fx; do chmod +x "$f"; done && lf -remote "send $id reload" && lf -remote "send $id unselect"


# Ctrl+e	Bewegt den Cursor eine Zeile nach unten
# map <c-e> down
# Ctrl+y	Bewegt den Cursor eine Zeile nach oben
# map <c-y> up
# V √ñffnet den Texteditor nvim (Neovim) im aktuellen Verzeichnis
# map V push :!nvim<space>

# W		√ñffnet ein neues Terminal-Fenster im aktuellen Verzeichnis
map W $setsid -f $TERMINAL >/dev/null 2>&1

# U 		Kopiert den vollst√§ndigen Pfad der ausgew√§hlten Datei(en) in die Zwischenablage
map U $printf "%s" "$fx" | xclip -selection clipboard
# u 		Kopiert nur den Dateinamen (ohne Pfad) der ausgew√§hlten Datei(en) in die Zwischenablage
map u $printf "%s" "$fx" | sed 's/.*\///' | xclip -selection clipboard
# . (Punkt) 	Extrahiert eine YouTube-URL aus dem Dateinamen und kopiert sie in die Zwischenablage
map . $printf "%s" "$fx" | sed -E 's/^.+\[/https:\/\/www.youtube.com\/watch?v=/' | sed -E 's/\]\..+//' | xclip -selection clipboard
# (Gr√∂√üer-als-Zeichen): √Ñhnlich wie der vorherige Befehl, aber f√ºr Piped (eine alternative YouTube-Frontend) URLs
map <gt> $printf "%s" "$fx" | sed -E 's/^.+\[/https:\/\/piped.video\/watch?v=/' | sed -E 's/\]\..+//' | xclip -selection clipboard
# T 		√ñffnet nsxiv (Simple X Image Viewer) im Thumbnail-Modus f√ºr das aktuelle Verzeichnis
map T $nsxiv -t "$(pwd)" 	# √∂ffnet den Thumbnailmodus
# Ctrl+l 	Hebt die Auswahl aller ausgew√§hlten Dateien auf
map <c-l> unselect



# Lesezeichen einbinden
source "~/.config/lf/shortcutrc"
