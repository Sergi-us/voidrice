# Sergius 10.07.2024
# Farben einschalten und Eingabeaufforderung ändern
:autoload -U colors && colors	# Load colors

#Regelt das aussehen des Eingabeprompes

function git_prompt_info() {
    if git rev-parse --is-inside-work-tree &>/dev/null; then
        echo " [%F{yellow}$(git symbolic-ref --short HEAD 2>/dev/null)%f]"
    fi
}

PS1='%B%F{cyan}┌─[%D]─[%F{magenta}%n%F{cyan}@%F{yellow}%m%F{cyan}]─[%F{green}%~%F{cyan}]$(git_prompt_info)%f%b
%B%F{cyan}└─[%F{blue}%*%F{cyan}]─➤ %f%b'

# PS1='%B%F{cyan}┌─[%D]─[%F{magenta}%n%F{cyan}@%F{yellow}%m%F{cyan}]─[%F{green}%~%F{cyan}]%f%b
# %B%F{cyan}└─[%F{blue}%*%F{cyan}]─➤ %f%b'

#PS1='%B%F{cyan}┌─[%D]─[%F{magenta}%n%F{cyan}@%F{yellow}%m%F{cyan}]─[%F{green}%~%F{cyan}]%f%b
#%B%F{cyan}└─[%F{blue}%*%F{cyan}]─➤ %f%b '

# PS1="%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M %{$fg[magenta]%}%~%{$fg[red]%}]%{$reset_color%}$%b "



setopt autocd		# Farben einschalten und Eingabeaufforderung ändern:
stty stop undef		# Deaktivieren Sie Strg-s, um das Terminal einzufrieren.
setopt interactive_comments

# Verlauf im Cache-Verzeichnis:
HISTSIZE=10000000
SAVEHIST=10000000
HISTFILE="${XDG_CACHE_HOME:-$HOME/.cache}/zsh/history"
setopt inc_append_history

# Alias und Verknüpfungen laden, falls vorhanden.
[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/shell/shortcutrc" ] && source "${XDG_CONFIG_HOME:-$HOME/.config}/shell/shortcutrc"
[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/shell/aliasrc" ] && source "${XDG_CONFIG_HOME:-$HOME/.config}/shell/aliasrc"
[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/shell/zshnameddirrc" ] && source "${XDG_CONFIG_HOME:-$HOME/.config}/shell/zshnameddirrc"

# Basic auto/tab komplettierung:
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots)		# Versteckte Dateien einbeziehen.

# vi mode
bindkey -v
export KEYTIMEOUT=1

# Nutze vim Tasten in tab kompletierungs menu:
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -v '^?' backward-delete-char

# ändere den Cursor für verschiedene vi modi.
function zle-keymap-select () {
    case $KEYMAP in
        vicmd) echo -ne '\e[1 q';;      # block
        viins|main) echo -ne '\e[5 q';; # beam
    esac
}
zle -N zle-keymap-select
zle-line-init() {
    zle -K viins #  initiiere `vi insert` als keymap (kann entfernt werden, wenn `bindkey -V` anderweitig gesetzt wurde)
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # nutze Strahlform-Cursor beim Start.
preexec() { echo -ne '\e[5 q' ;} # nutze Strahlform-Cursor für jeden neuen Promt.

# nutze lf zum Wechseln von Verzeichnissen und binden Sie es an ctrl-o.
lfcd () {
    tmp="$(mktemp -uq)"
    trap 'rm -f $tmp >/dev/null 2>&1 && trap - HUP INT QUIT TERM PWR EXIT' HUP INT QUIT TERM PWR EXIT
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}
bindkey -s '^o' '^ulfcd\n'

bindkey -s '^a' '^ubc -lq\n'

bindkey -s '^f' '^ucd "$(dirname "$(fzf)")"\n'

bindkey '^[[P' delete-char

# Zeile in nvim mit Strg-e bearbeiten:
autoload edit-command-line; zle -N edit-command-line
bindkey '^e' edit-command-line
bindkey -M vicmd '^[[P' vi-delete-char
bindkey -M vicmd '^e' edit-command-line
bindkey -M visual '^[[P' vi-delete

# Load syntax highlighting; should be last.
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# luke's version
# source /usr/share/zsh/plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh 2>/dev/null

# Enable auto-suggestions (you need to install zsh-autosuggestions)
source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
