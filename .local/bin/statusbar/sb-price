#!/bin/sh

# Cryptocurrency Price Checker
# SARBS 09.11.2024
#
# Beschreibung:
# Dieses Skript ruft Kryptow√§hrungspreise von rate.sx ab und zeigt sie formatiert an.
# TODO rate.sx kommt mit $ als Standartw√§hrung daher, eine umstellung auf eur ist mir nicht gelungen
# Es speichert auch Preishistorien und kann Preisgrafiken anzeigen.
#
# Verwendung:
#   price <Basisw√§hrung-Zierw√§hrung> <"W√§hrungsname"> <Icon> <Signal>
#
# Beispiel:
#   price bat-btc "Basic Attention Token" ü¶Å 24
#   Zeigt den BAT-Preis in BTC an und aktualisiert bei Signal 24
#
# Parameter:
#   $1 - W√§hrungspaar (z.B. 'bat-btc')
#   $2 - Anzeigename der W√§hrung (optional, Standard ist $1)
#   $3 - Anzeigesymbol (optional, Standard ist üí∞)
#   $4 - Signal f√ºr Updates (optional)

# √úberpr√ºfung auf erforderliche Parameter
[ -z "$1" ] && exit 1

# Grundlegende Konfiguration
url="${CRYPTOURL:-rate.sx}"
target="${1%%-*}"
denom="${1##*-}"
name="${2:-$1}"
icon="${3:-üí∞}"
# W√§hrungssymbol-Konfiguration
case "$denom" in
	"$target"|usd) denom="usd"; symb="$" ;;
	gbp) symb="¬£" ;;
	eur) symb="‚Ç¨" ;;
	btc) symb="ÔÖö" ;;
	*) denom="eur"; symb="‚Ç¨" ;; # Fallback zu Euro als Standardw√§hrung
esac

# Konfiguration f√ºr Preishistorie
interval="@1M"	# History contained in chart preceded by '@' (7d = 7 days)

# Verzeichnis- und Dateikonfiguration
dir="${XDG_CACHE_HOME:-$HOME/.cache}/crypto-prices"
pricefile="$dir/$target-$denom"
chartfile="$dir/$target-$denom-chart"

# Pr√ºfe letzte Aktualisierung
filestat="$(stat -c %x "$pricefile" 2>/dev/null)"

# Erstelle Cache-Verzeichnis falls nicht vorhanden
[ -d "$dir" ] || mkdir -p "$dir"

# Funktion zum Aktualisieren der Preisdaten
updateprice() { curl -sf \
	--fail-early "${denom}.${url}/1${target}" "${denom}.${url}/${target}${interval}" \
	--output "$pricefile" --output "$chartfile" ||
	rm -f "$pricefile" "$chartfile" ;}

# Pr√ºfe ob Update notwendig (einmal t√§glich)
[ "${filestat%% *}" != "$(date '+%Y-%m-%d')" ] &&
	updateme="1"

# Behandlung von Mausklicks
case $BLOCK_BUTTON in
	1) setsid "$TERMINAL" -e less -Srf "$chartfile" ;;
    2)  notify-send -u low "$icon Aktualisierung..." "Aktualisiere $name Preis..."
        updateme="1"
        showupdate="1" ;;
    3)  uptime="$(date -d "$filestat" '+%D at %T' | sed "s|$(date '+%D')|Heute|")"
        notify-send "$icon $name Modul" "\
- <b>Exakter Preis: \$$(cat "$pricefile")</b>
- Linksklick f√ºr Preisverlauf
- Mittelklick zum Aktualisieren
- Zeigt üîÉ w√§hrend der Aktualisierung
- <b>Letzte Aktualisierung:	$uptime</b>" ;;
	6) setsid -f "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

# F√ºhre Update durch wenn n√∂tig
[ -n "$updateme" ] && updateprice "$target" && \
    [ -n "$showupdate" ] && \
    notify-send "$icon Update abgeschlossen." "$name Preis ist jetzt \$$(cat "$pricefile")"

# Setze das LC_NUMERIC-Format f√ºr printf
LC_NUMERIC=C
[ -f "$pricefile" ] && printf "%s%s\n" "$icon" "$(cat "$pricefile" | awk '{ printf "%\047d,%02d", int($1), ($1-int($1))*100 }' | sed 's/,/./; s/\B(?=(\d{3})+(?!\d))/./g')$symb"
