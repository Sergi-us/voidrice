#!/bin/sh
# 2024.11.07
# SARBS Backup Script
# Backup-Skript für die Synchronisation von Verzeichnissen auf einen USB-Stick
# und Wiederherstellung ins Home-Verzeichnis

# Automatisch den Benutzernamen und die Gruppe ermitteln
CLIENT_USER=$(whoami)
CLIENT_GROUP=$(id -gn $CLIENT_USER)

# Pfad zum USB-Stick eintragen
USB_MOUNT_POINT="/mnt/usb"

# Pfad zum Backup-Verzeichnis auf dem USB-Stick
USB_BACKUP_DIR="$USB_MOUNT_POINT/BACKUP"

# Liste der zu synchronisierenden Verzeichnisse und Dateien (relative Pfade)
DIR_LIST=(
    "Bilder/"
    "Bücher/"
    "Davinci/"
    "Dokumente/"
    "Downloads/"
    "dwm-6.5/"
    "Filme/"
    "GitHub/"
    "Handy/"
    "Magazine/"
    "memes/"
    "Musik/"
    "Musika/"
    "Podcast/"
    "Serien/"
    "usenet/"
    "Videos/"
    "vm/"
    "www/"
    "vosk-model-de/"
    ".ssh/"
    ".gnupg/"
    ".local/share/password-store/"
    ".local/share/mail"
    ".abook/"
    ".local/share/nvim/"
    ".local/share/calcurse/"
    ".config/shell/"
)

FILE_LIST=(
    ".config/newsboat/urls"
    ".config/zsh/history"
    ".gitconfig"
    ".local/share/sarbs/snippets"
    ".config/zsh/.zshrc"
    ".config/nvim/init.vim"
    ".local/bin/syn"
    ".local/bin/syn-handy"
    ".local/bin/dmenurecord"
    ".local/bin/push-www"
    ".local/bin/cam"
    ".local/bin/cam.py"
    ".local/bin/ttf-zu-unicode"
    ".local/bin/ttf-zu-unicode-mit-glyphen"
    ".local/bin/ttf-zu-unicode-mit-glyphen-uebersetzt"
    ".local/bin/tutorialvids"
    ".local/bin/*.bac*"
    "~"
)

# Funktion zum Löschen leerer Verzeichnisse auf dem USB-Stick
delete_empty_directories() {
    echo "Lösche leere Verzeichnisse auf dem USB-Stick..."
    # Erst die normalen leeren Verzeichnisse
    find "$USB_BACKUP_DIR" -depth -type d -empty -exec rmdir {} \;

    # Dann speziell nach den Base64-artigen Verzeichnissen suchen
    find "$USB_MOUNT_POINT" -maxdepth 1 -type d -name "BACKUP=*" -exec rmdir {} \;
    find "$USB_MOUNT_POINT" -maxdepth 1 -type d -name "BACKUPz*" -exec rmdir {} \;

    echo "Leere Verzeichnisse gelöscht."
}

# Funktion zum Erstellen der Verzeichnisstruktur auf dem USB-Stick
create_directories() {
    echo "Erstelle Verzeichnisstruktur auf dem USB-Stick..."
    # Verzeichnisse aus DIR_LIST erstellen
    for item in "${DIR_LIST[@]}"; do
        source_dir="/home/$CLIENT_USER/$item"
        if [ -d "$source_dir" ]; then
            find "$source_dir" -type d | while read -r dir; do
                target_dir="$USB_BACKUP_DIR${dir#/home/$CLIENT_USER}"
                mkdir -p "$target_dir"
                echo "Verzeichnis erstellt: $target_dir"
            done
        fi
    done

    # Verzeichnisse für FILE_LIST erstellen
    for item in "${FILE_LIST[@]}"; do
        if [ "$item" = "~" ]; then
            # Für Home-Dateien ein separates Verzeichnis erstellen
            mkdir -p "$USB_BACKUP_DIR/home_files"
            echo "Verzeichnis erstellt: $USB_BACKUP_DIR/home_files"
        else
            target_dir="$USB_BACKUP_DIR/$(dirname "$item")"
            mkdir -p "$target_dir"
            echo "Verzeichnis erstellt: $target_dir"
        fi
    done

    echo "Verzeichnisstruktur erstellt."
}


# Funktion zum Durchführen des Backups
perform_backup() {
    echo "Backup wird durchgeführt..."
    # Erst die definierten Verzeichnisse synchronisieren
    for item in "${DIR_LIST[@]}"; do
        rsync -av --delete "/home/$CLIENT_USER/$item" "$USB_BACKUP_DIR/$item"
        echo "Synchronisiert: $item"
    done

    for item in "${FILE_LIST[@]}"; do
        if [ "$item" = "~" ]; then
            # Nur einzelne Dateien im Home-Verzeichnis synchronisieren, keine Verzeichnisse
            rsync -av --delete \
                  --exclude='.*' \
                  --exclude='*/' \
                  "/home/$CLIENT_USER/" "$USB_BACKUP_DIR/home_files/"
            echo "Synchronisiert: Einzeldateien im Home-Verzeichnis"
        else
            rsync -av --delete "/home/$CLIENT_USER/$item" "$USB_BACKUP_DIR/$item"
            echo "Synchronisiert: $item"
        fi
    done
    echo "Backup abgeschlossen."
}


# Funktion zum Erstellen der Verzeichnisstruktur im Home-Verzeichnis vom USB-Stick
create_home_directories_from_usb() {
    echo "Erstelle Verzeichnisstruktur im Home-Verzeichnis vom USB-Stick..."
    for item in "${DIR_LIST[@]}"; do
        usb_item="$USB_BACKUP_DIR/$item"
        if [ -d "$usb_item" ]; then
            find "$usb_item" -type d | while read -r dir; do
                target_dir="/home/$CLIENT_USER${dir#$USB_BACKUP_DIR}"
                sudo mkdir -p "$target_dir"
                sudo chown "$CLIENT_USER:$CLIENT_GROUP" "$target_dir"
                echo "Verzeichnis erstellt: $target_dir"
            done
        fi
    done

    for item in "${FILE_LIST[@]}"; do
        target_dir="/home/$CLIENT_USER/$(dirname "$item")"
        sudo mkdir -p "$target_dir"
        sudo chown "$CLIENT_USER:$CLIENT_GROUP" "$target_dir"
        echo "Verzeichnis erstellt: $target_dir"
    done

    echo "Verzeichnisstruktur im Home-Verzeichnis erstellt."
}

# Funktion zur Wiederherstellung der Dateien vom USB-Stick ins Home-Verzeichnis
perform_restore() {
    echo "Wiederherstellung wird durchgeführt..."
    for item in "${DIR_LIST[@]}"; do
        source="$USB_BACKUP_DIR/$item"
        if [ -e "$source" ]; then
            sudo rsync -av --exclude '.*' "$source" "/home/$CLIENT_USER/$item"
            echo "Wiederhergestellt: $item"
        else
            echo "Warnung: $source existiert nicht auf dem USB-Stick und wird übersprungen."
        fi
    done

    for item in "${FILE_LIST[@]}"; do
        source="$USB_BACKUP_DIR/$item"
        if [ -e "$source" ]; then
            sudo rsync -av --exclude '.*' "$source" "/home/$CLIENT_USER/$item"
            echo "Wiederhergestellt: $item"
        else
            echo "Warnung: $source existiert nicht auf dem USB-Stick und wird übersprungen."
        fi
    done

    echo "Wiederherstellung abgeschlossen."
}

# Überprüfen, ob der USB-Stick gemountet ist
check_mount() {
    if mount | grep "$USB_MOUNT_POINT" > /dev/null; then
        echo "USB-Stick ist gemountet."
        return 0
    else
        echo "USB-Stick ist nicht gemountet. Bitte mounten und erneut versuchen."
        return 1
    fi
}

case $1 in
    --delete)
        check_mount && delete_empty_directories ;;
    --create)
        check_mount && create_directories ;;
    --backup)
        check_mount && perform_backup ;;
    --restore)
        if check_mount; then
            create_home_directories_from_usb
            perform_restore
        fi ;;
    --all)
        check_mount && create_directories && perform_backup && delete_empty_directories ;;
    *)
        echo "Usage: $0 {--delete|--create|--backup|--restore|--all}"
        echo "  --delete   Löscht leere Verzeichnisse auf dem USB-Stick"
        echo "  --create   Erstellt die Verzeichnisstruktur auf dem USB-Stick"
        echo "  --backup   Führt das Backup der angegebenen Verzeichnisse durch"
        echo "  --restore  Führt die Wiederherstellung der angegebenen Verzeichnisse vom USB-Stick durch"
        echo "  --all      Führt alle oben genannten Schritte durch"
        ;;
esac

# Am Ende eine Bestätigung einfügen
read -p "Drücke Enter, um das Terminal zu schließen..."
