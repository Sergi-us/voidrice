#!/bin/sh
# Backup für USB-Stick
# SARBS Backup Script 0.7
# Backup-Skript für die Synchronisation von Verzeichnissen auf einen USB-Stick und Wiederherstellung ins Home-Verzeichnis

# Funktion für Benachrichtigungen
notify() {
    echo "$2"
    notify-send "Backup Status" "$2"
}

# Automatisch den Benutzernamen und die Gruppe ermitteln
CLIENT_USER=$(whoami)
CLIENT_GROUP=$(id -gn $CLIENT_USER)

# Pfad zum USB-Stick eintragen
USB_MOUNT_POINT="/mnt/usb"

# Pfad zum Backup-Verzeichnis auf dem USB-Stick
USB_BACKUP_DIR="$USB_MOUNT_POINT/BACKUP"

# Array für rsync-Optionen
RSYNC_OPTS=(
    -a    # Archiv-Modus (erhält Berechtigungen, Zeitstempel, symbolische Links, etc.)
    -v    # Ausführliche Ausgabe
    -u    # Update-Modus (überträgt nur neuere Dateien)
    -z    # Komprimierung während der Übertragung
    -P    # Kombination aus --progress und --partial
    --delete-after    # Löscht überflüssige Dateien im Ziel nach der Übertragung
    --inplace    # Aktualisiert Dateien direkt, ohne temporäre Kopien
)

# Liste der zu synchronisierenden Verzeichnisse und Dateien (relative Pfade)
BACKUP_LIST=(
    ".ssh/"
    ".config/abook/"
    ".local/share/nvim/vimwiki/"
    ".local/share/calcurse/"
    ".local/share/nvim/tutor/"
    "Dokumente/"
    ".local/bin/"
    "Downloads/"
    "YouTube-rechersche/"
    "GitHub/"
    "Musik/"
    "Sergi-us/"
    "Videos/YouTube/"
    ".config/newsboat/urls"
    ".config/zsh/.zshrc"
    ".gitconfig"
    ".local/share/larbs/snippets"
    ".local/bin/syn"
    ".local/bin/dmenurecord"
    ".local/bin/push-www"
    ".local/bin/push-github"
    ".local/bin/cam"
    ".config/zsh/.zsh_history"
)

# Liste der auszuschließenden Dateien oder Verzeichnisse
EXCLUDE_LIST=(
    ".cache"
    "node_modules"
    "*.tmp"
    "*.log"
)

# Funktion zum Löschen leerer Verzeichnisse auf dem USB-Stick
delete_empty_directories() {
    notify "Lösche leere Verzeichnisse" "Lösche leere Verzeichnisse auf dem USB-Stick..."
    find "$USB_BACKUP_DIR" -depth -type d -empty -exec rmdir {} \;
    notify "Leere Verzeichnisse gelöscht" "Leere Verzeichnisse gelöscht."
}

# Funktion zum Durchführen des Backups
perform_backup() {
    notify "Backup gestartet" "Backup wird durchgeführt..."
    for item in "${BACKUP_LIST[@]}"; do
        rsync "${RSYNC_OPTS[@]}" $(printf -- '--exclude=%s ' "${EXCLUDE_LIST[@]}") "/home/$CLIENT_USER/$item" "$USB_BACKUP_DIR/"
        notify "Synchronisiert" "Synchronisiert: $item"
    done

    # Zusätzliches Backup für nicht versteckte Dateien im Home-Verzeichnis
    rsync "${RSYNC_OPTS[@]}" $(printf -- '--exclude=%s ' "${EXCLUDE_LIST[@]}") --exclude '.*' "/home/$CLIENT_USER/" "$USB_BACKUP_DIR/"
    notify "Synchronisiert" "Synchronisiert: nicht versteckte Dateien im Home-Verzeichnis"

    notify "Backup abgeschlossen" "Backup abgeschlossen."
}

# Funktion zur Wiederherstellung der Dateien vom USB-Stick ins Home-Verzeichnis
perform_restore() {
    notify "Wiederherstellung gestartet" "Wiederherstellung wird durchgeführt..."
    for item in "${BACKUP_LIST[@]}"; do
        source="$USB_BACKUP_DIR/$item"
        if [ -e "$source" ]; then
            sudo rsync "${RSYNC_OPTS[@]}" --chown="$CLIENT_USER:$CLIENT_GROUP" $(printf -- '--exclude=%s ' "${EXCLUDE_LIST[@]}") "$source" "/home/$CLIENT_USER/"
            notify "Wiederhergestellt" "Wiederhergestellt: $item"
        else
            notify "Warnung" "Warnung: $source existiert nicht auf dem USB-Stick und wird übersprungen."
        fi
    done

    # Zusätzliche Wiederherstellung für nicht versteckte Dateien im Home-Verzeichnis
    sudo rsync "${RSYNC_OPTS[@]}" --chown="$CLIENT_USER:$CLIENT_GROUP" $(printf -- '--exclude=%s ' "${EXCLUDE_LIST[@]}") --exclude '.*' "$USB_BACKUP_DIR/" "/home/$CLIENT_USER/"
    notify "Wiederhergestellt" "Wiederhergestellt: nicht versteckte Dateien im Home-Verzeichnis"

    notify "Wiederherstellung abgeschlossen" "Wiederherstellung abgeschlossen."
}

# Überprüfen, ob der USB-Stick gemountet ist
check_mount() {
    if mount | grep "$USB_MOUNT_POINT" > /dev/null; then
        notify "USB-Stick gemountet" "USB-Stick ist gemountet."
        return 0
    else
        notify "USB-Stick nicht gemountet" "USB-Stick ist nicht gemountet. Bitte mounten und erneut versuchen."
        return 1
    fi
}

case $1 in
    --delete)
        check_mount && delete_empty_directories ;;
    --backup)
        check_mount && perform_backup ;;
    --restore)
        check_mount && perform_restore ;;
    --all)
        check_mount && delete_empty_directories && perform_backup ;;
    *)
        echo "Usage: $0 {--delete|--backup|--restore|--all}"
        echo "  --delete   Löscht leere Verzeichnisse auf dem USB-Stick"
        echo "  --backup   Führt das Backup der angegebenen Verzeichnisse durch"
        echo "  --restore  Führt die Wiederherstellung der angegebenen Verzeichnisse vom USB-Stick durch"
        echo "  --all      Führt alle oben genannten Schritte durch"
        ;;
esac

# Am Ende eine Bestätigung einfügen
read -p "Drücke Enter, um das Terminal zu schließen..."
